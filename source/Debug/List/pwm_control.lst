###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           04/Dec/2019  19:21:28
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Dr Velasquez\Desktop\306\306_code\Project 10\pwm_control.c
#    Command line  =  
#        -f C:\Users\DRVELA~1\AppData\Local\Temp\EWAA79.tmp ("C:\Users\Dr
#        Velasquez\Desktop\306\306_code\Project 10\pwm_control.c" -lC
#        "C:\Users\Dr Velasquez\Desktop\306\306_code\Project 10\Debug\List" -o
#        "C:\Users\Dr Velasquez\Desktop\306\306_code\Project 10\Debug\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I ./\
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Dr Velasquez\Desktop\306\306_code\Project
#        10\Debug\List\pwm_control.lst
#    Object file   =  
#        C:\Users\Dr Velasquez\Desktop\306\306_code\Project
#        10\Debug\Obj\pwm_control.r43
#
###############################################################################

C:\Users\Dr Velasquez\Desktop\306\306_code\Project 10\pwm_control.c
      1          //===========================================================================
      2          // File Name : pwm_control.c
      3          //
      4          // Description: This file contains the Initialization for all port pins
      5          //
      6          // Author: Yuvini Velasquez
      7          // Date: 9/11/19
      8          // Compiler: Built with IAR Embedded Workbench Version: V (7.12.4)
      9          //===========================================================================
     10          
     11          #include  "functions.h"
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x454
   \   union <unnamed> _A_TB3CCR1_L
   \                     _A_TB3CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   union <unnamed> _A_TB3CCR2_L
   \                     _A_TB3CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x458
   \   union <unnamed> _A_TB3CCR3_L
   \                     _A_TB3CCR3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x45a
   \   union <unnamed> _A_TB3CCR4_L
   \                     _A_TB3CCR4_L:
   \   000000                DS8 2
     13          #include <string.h>
     14          #include "macros.h"
     15          
     16          //void Init_LEDs(void){
     17          ////------------------------------------------------------------------------------
     18          //// LED Configurations
     19          ////------------------------------------------------------------------------------
     20          //// Turns on both LEDs
     21          //// TB3.1 P6.0 R_FORWARD
     22          //// TB3.2 P6.1 L_FORWARD
     23          //// TB3.3 P6.2 R_REVERSE
     24          //// TB3.4 P6.3 L_REVERSE
     25          //  
     26          //RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.0 Right Forward PWM OFF
     27          //RIGHT_FORWARD_SPEED = [DESIRED ON AMOUNT]; // P6.0 Right Forward PWM ON amount
     28          //
     29          //LEFT_FORWARD_SPEED = WHEEL_OFF; // P6.1 Left Forward PWM OFF
     30          //LEFT_FORWARD_SPEED = [DESIRED ON AMOUNT]; // P6.1 Left Forward PWM ON amount
     31          //
     32          //RIGHT_REVERSE_SPEED = WHEEL_OFF; // P6.2 Right Reverse PWM OFF
     33          //RIGHT_REVERSE_SPEED = [DESIRED ON AMOUNT]; // P6.2 Right Reverse PWM ON amount
     34          //
     35          //LEFT_REVERSE_SPEED = WHEEL_OFF; // P6.3 Left Reverse PWM OFF
     36          //LEFT_REVERSE_SPEED = [DESIRED ON AMOUNT]; // P6.3 Left Reverse PWM ON amount
     37          ////------------------------------------------------------------------------------
     38          //}
     39          

   \                                 In  segment CODE, align 2
     40          void wheels_offpwm(void){
   \                     wheels_offpwm:
     41          // TB3.1 P6.0 R_FORWARD
     42          // TB3.2 P6.1 L_FORWARD
     43          // TB3.3 P6.2 R_REVERSE
     44          // TB3.4 P6.3 L_REVERSE
     45            
     46          RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.0 Right Forward PWM OFF
   \   000000   82435404     MOV.W   #0x0, &0x454
     47          LEFT_FORWARD_SPEED = WHEEL_OFF; // P6.1 Left Forward PWM OFF
   \   000004   82435604     MOV.W   #0x0, &0x456
     48          RIGHT_REVERSE_SPEED = WHEEL_OFF; // P6.2 Right Reverse PWM OFF
   \   000008   82435804     MOV.W   #0x0, &0x458
     49          LEFT_REVERSE_SPEED = WHEEL_OFF; // P6.3 Left Reverse PWM OFF
   \   00000C   82435A04     MOV.W   #0x0, &0x45a
     50          GREEN_LED_OFF;
   \   000010   F2C040004302 BIC.B   #0x40, &0x243
     51          RED_LED_OFF;
   \   000016   D2C30202     BIC.B   #0x1, &0x202
     52          }
   \   00001A   1001         RETA
   \   00001C                REQUIRE _A_TB3CCR1_L
   \   00001C                REQUIRE _A_TB3CCR2_L
   \   00001C                REQUIRE _A_TB3CCR3_L
   \   00001C                REQUIRE _A_TB3CCR4_L
   \   00001C                REQUIRE _A_PCOUT_L
   \   00001C                REQUIRE _A_PAOUT_L
     53          

   \                                 In  segment CODE, align 2
     54          void wheels_forwardpwm(void){
   \                     wheels_forwardpwm:
     55          // TB3.1 P6.0 R_FORWARD
     56          // TB3.2 P6.1 L_FORWARD
     57          // TB3.3 P6.2 R_REVERSE
     58          // TB3.4 P6.3 L_REVERSE
     59          RIGHT_REVERSE_SPEED = WHEEL_OFF; // P6.2 Right Reverse PWM OFF
   \   000000   82435804     MOV.W   #0x0, &0x458
     60          LEFT_REVERSE_SPEED = WHEEL_OFF; // P6.3 Left Reverse PWM OFF
   \   000004   82435A04     MOV.W   #0x0, &0x45a
     61          RIGHT_FORWARD_SPEED = WHEEL_FULL; // P6.0 Right Forward PWM ON          40000        
   \   000008   B240409C5404 MOV.W   #0x9c40, &0x454
     62          LEFT_FORWARD_SPEED = WHEEL_LEFT_FULL; // P6.1 Left Forward PWM ON       25000 MATCHES RIGHT
   \   00000E   B240A8615604 MOV.W   #0x61a8, &0x456
     63          GREEN_LED_OFF;
   \   000014   F2C040004302 BIC.B   #0x40, &0x243
     64          RED_LED_ON;
   \   00001A   D2D30202     BIS.B   #0x1, &0x202
     65          }
   \   00001E   1001         RETA
   \   000020                REQUIRE _A_TB3CCR3_L
   \   000020                REQUIRE _A_TB3CCR4_L
   \   000020                REQUIRE _A_TB3CCR1_L
   \   000020                REQUIRE _A_TB3CCR2_L
   \   000020                REQUIRE _A_PCOUT_L
   \   000020                REQUIRE _A_PAOUT_L
     66          

   \                                 In  segment CODE, align 2
     67          void wheels_reversepwm(void){
   \                     wheels_reversepwm:
     68          // TB3.1 P6.0 R_FORWARD
     69          // TB3.2 P6.1 L_FORWARD
     70          // TB3.3 P6.2 R_REVERSE
     71          // TB3.4 P6.3 L_REVERSE
     72          
     73          RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.0 Right Forward PWM OFF
   \   000000   82435404     MOV.W   #0x0, &0x454
     74          LEFT_FORWARD_SPEED = WHEEL_OFF; // P6.1 Left Forward PWM OFF
   \   000004   82435604     MOV.W   #0x0, &0x456
     75          RIGHT_REVERSE_SPEED = WHEEL_FULL; // P6.2 Right Reverse PWM ON          40000
   \   000008   B240409C5804 MOV.W   #0x9c40, &0x458
     76          LEFT_REVERSE_SPEED = WHEEL_LEFT_BACK; // P6.3 Left Reverse PWM ON            30000
   \   00000E   B24030755A04 MOV.W   #0x7530, &0x45a
     77          GREEN_LED_OFF;
   \   000014   F2C040004302 BIC.B   #0x40, &0x243
     78          RED_LED_ON;
   \   00001A   D2D30202     BIS.B   #0x1, &0x202
     79          }
   \   00001E   1001         RETA
   \   000020                REQUIRE _A_TB3CCR1_L
   \   000020                REQUIRE _A_TB3CCR2_L
   \   000020                REQUIRE _A_TB3CCR3_L
   \   000020                REQUIRE _A_TB3CCR4_L
   \   000020                REQUIRE _A_PCOUT_L
   \   000020                REQUIRE _A_PAOUT_L
     80          

   \                                 In  segment CODE, align 2
     81          void wheels_clkwise_pwm(void){
   \                     wheels_clkwise_pwm:
     82          // TB3.1 P6.0 R_FORWARD
     83          // TB3.2 P6.1 L_FORWARD
     84          // TB3.3 P6.2 R_REVERSE
     85          // TB3.4 P6.3 L_REVERSE
     86          
     87          LEFT_REVERSE_SPEED = WHEEL_OFF; // P6.3 Left Reverse PWM ON
   \   000000   82435A04     MOV.W   #0x0, &0x45a
     88          RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.0 Right Forward PWM OFF
   \   000004   82435404     MOV.W   #0x0, &0x454
     89          RIGHT_REVERSE_SPEED = WHEEL_FULL; // P6.2 Right Reverse PWM ON          40000
   \   000008   B240409C5804 MOV.W   #0x9c40, &0x458
     90          LEFT_FORWARD_SPEED = WHEEL_LEFT_FULL; // P6.1 Left Forward PWM OFF      25000
   \   00000E   B240A8615604 MOV.W   #0x61a8, &0x456
     91          GREEN_LED_OFF;
   \   000014   F2C040004302 BIC.B   #0x40, &0x243
     92          RED_LED_ON;
   \   00001A   D2D30202     BIS.B   #0x1, &0x202
     93          }
   \   00001E   1001         RETA
   \   000020                REQUIRE _A_TB3CCR4_L
   \   000020                REQUIRE _A_TB3CCR1_L
   \   000020                REQUIRE _A_TB3CCR3_L
   \   000020                REQUIRE _A_TB3CCR2_L
   \   000020                REQUIRE _A_PCOUT_L
   \   000020                REQUIRE _A_PAOUT_L
     94          

   \                                 In  segment CODE, align 2
     95          void wheels_ctrwise_pwm(void){
   \                     wheels_ctrwise_pwm:
     96          // TB3.1 P6.0 R_FORWARD
     97          // TB3.2 P6.1 L_FORWARD
     98          // TB3.3 P6.2 R_REVERSE
     99          // TB3.4 P6.3 L_REVERSE
    100          RIGHT_REVERSE_SPEED = WHEEL_OFF; // P6.2 Right Reverse PWM OFF          
   \   000000   82435804     MOV.W   #0x0, &0x458
    101          LEFT_FORWARD_SPEED = WHEEL_OFF; // P6.1 Left Forward PWM OFF 
   \   000004   82435604     MOV.W   #0x0, &0x456
    102          LEFT_REVERSE_SPEED = WHEEL_LEFT_FULL; // P6.3 Left Reverse PWM ON    25000
   \   000008   B240A8615A04 MOV.W   #0x61a8, &0x45a
    103          RIGHT_FORWARD_SPEED = WHEEL_FULL; // P6.0 Right Forward PWM ON      40000   
   \   00000E   B240409C5404 MOV.W   #0x9c40, &0x454
    104          GREEN_LED_OFF;
   \   000014   F2C040004302 BIC.B   #0x40, &0x243
    105          RED_LED_ON;
   \   00001A   D2D30202     BIS.B   #0x1, &0x202
    106          }
   \   00001E   1001         RETA
   \   000020                REQUIRE _A_TB3CCR3_L
   \   000020                REQUIRE _A_TB3CCR2_L
   \   000020                REQUIRE _A_TB3CCR4_L
   \   000020                REQUIRE _A_TB3CCR1_L
   \   000020                REQUIRE _A_PCOUT_L
   \   000020                REQUIRE _A_PAOUT_L
    107          
    108          

   \                                 In  segment CODE, align 2
    109          void wheels_clkwiseslow_pwm(void){
   \                     wheels_clkwiseslow_pwm:
    110          // TB3.1 P6.0 R_FORWARD
    111          // TB3.2 P6.1 L_FORWARD
    112          // TB3.3 P6.2 R_REVERSE
    113          // TB3.4 P6.3 L_REVERSE
    114          
    115          LEFT_REVERSE_SPEED = WHEEL_OFF; // P6.3 Left Reverse PWM ON
   \   000000   82435A04     MOV.W   #0x0, &0x45a
    116          RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.0 Right Forward PWM OFF
   \   000004   82435404     MOV.W   #0x0, &0x454
    117          RIGHT_REVERSE_SPEED = WHEEL_VERY_SLOW; // P6.2 Right Reverse PWM ON
   \   000008   B240204E5804 MOV.W   #0x4e20, &0x458
    118          LEFT_FORWARD_SPEED =  WHEEL_LEFT_SLOW; // P6.1 Left Forward PWM OFF
   \   00000E   B240983A5604 MOV.W   #0x3a98, &0x456
    119          GREEN_LED_OFF;
   \   000014   F2C040004302 BIC.B   #0x40, &0x243
    120          RED_LED_ON;
   \   00001A   D2D30202     BIS.B   #0x1, &0x202
    121          }
   \   00001E   1001         RETA
   \   000020                REQUIRE _A_TB3CCR4_L
   \   000020                REQUIRE _A_TB3CCR1_L
   \   000020                REQUIRE _A_TB3CCR3_L
   \   000020                REQUIRE _A_TB3CCR2_L
   \   000020                REQUIRE _A_PCOUT_L
   \   000020                REQUIRE _A_PAOUT_L

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   wheels_clkwise_pwm
      4   wheels_clkwiseslow_pwm
      4   wheels_ctrwise_pwm
      4   wheels_forwardpwm
      4   wheels_offpwm
      4   wheels_reversepwm


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  _A_PAOUT_L
       2  _A_PCOUT_L
       2  _A_TB3CCR1_L
       2  _A_TB3CCR2_L
       2  _A_TB3CCR3_L
       2  _A_TB3CCR4_L
      32  wheels_clkwise_pwm
      32  wheels_clkwiseslow_pwm
      32  wheels_ctrwise_pwm
      32  wheels_forwardpwm
      28  wheels_offpwm
      32  wheels_reversepwm

 
 188 bytes in segment CODE
  12 bytes in segment DATA16_AN
 
 188 bytes of CODE memory
   0 bytes of DATA memory (+ 12 bytes shared)

Errors: none
Warnings: none
