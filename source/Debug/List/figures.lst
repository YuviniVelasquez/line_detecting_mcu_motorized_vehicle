###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           04/Dec/2019  11:21:04
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Dr Velasquez\Desktop\306\306_code\Project 10\figures.c
#    Command line  =  
#        -f C:\Users\DRVELA~1\AppData\Local\Temp\EWCB06.tmp ("C:\Users\Dr
#        Velasquez\Desktop\306\306_code\Project 10\figures.c" -lC "C:\Users\Dr
#        Velasquez\Desktop\306\306_code\Project 10\Debug\List" -o "C:\Users\Dr
#        Velasquez\Desktop\306\306_code\Project 10\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I ./\
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Dr Velasquez\Desktop\306\306_code\Project
#        10\Debug\List\figures.lst
#    Object file   =  
#        C:\Users\Dr Velasquez\Desktop\306\306_code\Project
#        10\Debug\Obj\figures.r43
#
###############################################################################

C:\Users\Dr Velasquez\Desktop\306\306_code\Project 10\figures.c
      1          //===========================================================================
      2          // File Name : figures.c
      3          //
      4          // Description: This file will control the speed for the tires to make specific figures
      5          //
      6          // Author: Yuvini Velasquez
      7          // Date: 9/29/19
      8          // Compiler: Built with IAR Embedded Workbench Version: V (7.12.4)
      9          //===========================================================================
     10          
     11          #include  "functions.h" 
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2
     13          #include <string.h>
     14          #include "macros.h"
     15          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          volatile unsigned int clockdiv_count = RESET_COUNTER;
   \                     clockdiv_count:
   \   000000                DS8 2
     17          extern volatile unsigned int Time_Sequence;
     18          extern volatile unsigned int circle_timer_count;
     19          
     20          

   \                                 In  segment CODE, align 2
     21          void stop_wheels(void){
   \                     stop_wheels:
     22          //------------------------------------------------------------------------------
     23          // Circle speed stopped
     24          //------------------------------------------------------------------------------
     25              P6OUT &= ~R_FORWARD;              //Right wheel off 
   \   000000   D2C34302     BIC.B   #0x1, &0x243
     26              P6OUT &= ~L_FORWARD;              //Left wheel off
   \   000004   E2C34302     BIC.B   #0x2, &0x243
     27          }
   \   000008   1001         RETA
   \   00000A                REQUIRE _A_PCOUT_L
     28          

   \                                 In  segment CODE, align 2
     29          void circle(void){
   \                     circle:
     30          //------------------------------------------------------------------------------
     31          // Circle speed configuration // one half of other
     32          //------------------------------------------------------------------------------
     33            if(Time_Sequence % on_every_25){
   \   000000   1C42....     MOV.W   &Time_Sequence, R12
   \   000004   3E401900     MOV.W   #0x19, R14
   \   000008   ........     CALLA   #?DivMod16u
   \   00000C   0E93         CMP.W   #0x0, R14
   \   00000E   0A24         JEQ     ??circle_0
     34              P6OUT |= R_FORWARD;              //Right wheel on 
   \   000010   D2D34302     BIS.B   #0x1, &0x243
     35              P6OUT &= ~L_FORWARD;              //Left wheel on
   \   000014   E2C34302     BIC.B   #0x2, &0x243
     36              GREEN_LED_ON;
   \   000018   F2D040004302 BIS.B   #0x40, &0x243
     37              RED_LED_OFF;
   \   00001E   D2C30202     BIC.B   #0x1, &0x202
   \   000022   1001         RETA
     38              
     39            }else{
     40              P6OUT |= R_FORWARD;              //Right wheel on 
   \                     ??circle_0:
   \   000024   D2D34302     BIS.B   #0x1, &0x243
     41              P6OUT |= L_FORWARD;              //Left wheel on
   \   000028   E2D34302     BIS.B   #0x2, &0x243
     42              GREEN_LED_ON;
   \   00002C   F2D040004302 BIS.B   #0x40, &0x243
     43              RED_LED_ON;
   \   000032   D2D30202     BIS.B   #0x1, &0x202
     44            }
     45           //------------------------------------------------------------------------------
     46          }
   \   000036   1001         RETA
   \   000038                REQUIRE _A_PCOUT_L
   \   000038                REQUIRE _A_PAOUT_L

   \                                 In  segment CODE, align 2
     47          void circle_left(void){
   \                     circle_left:
     48          //------------------------------------------------------------------------------
     49          // Circle speed configuration // one half of other
     50          //------------------------------------------------------------------------------
     51            if(Time_Sequence % on_every_50){
   \   000000   1C42....     MOV.W   &Time_Sequence, R12
   \   000004   3E403200     MOV.W   #0x32, R14
   \   000008   ........     CALLA   #?DivMod16u
   \   00000C   0E93         CMP.W   #0x0, R14
   \   00000E   0A24         JEQ     ??circle_left_0
     52              P6OUT |= R_FORWARD;              //Right wheel on 
   \   000010   D2D34302     BIS.B   #0x1, &0x243
     53              P6OUT &= ~L_FORWARD;              //Left wheel on
   \   000014   E2C34302     BIC.B   #0x2, &0x243
     54              GREEN_LED_OFF;
   \   000018   F2C040004302 BIC.B   #0x40, &0x243
     55              RED_LED_OFF;
   \   00001E   D2C30202     BIC.B   #0x1, &0x202
   \   000022   1001         RETA
     56              
     57            }else{
     58              P6OUT |= R_FORWARD;              //Right wheel on 
   \                     ??circle_left_0:
   \   000024   D2D34302     BIS.B   #0x1, &0x243
     59              P6OUT |= L_FORWARD;              //Left wheel on
   \   000028   E2D34302     BIS.B   #0x2, &0x243
     60              GREEN_LED_ON;
   \   00002C   F2D040004302 BIS.B   #0x40, &0x243
     61              RED_LED_ON;
   \   000032   D2D30202     BIS.B   #0x1, &0x202
     62            }
     63          
     64           //------------------------------------------------------------------------------
     65          }
   \   000036   1001         RETA
   \   000038                REQUIRE _A_PCOUT_L
   \   000038                REQUIRE _A_PAOUT_L

   \                                 In  segment CODE, align 2
     66          void circle_right(void){
   \                     circle_right:
     67          //------------------------------------------------------------------------------
     68          // Circle speed configuration // one half of other
     69          //------------------------------------------------------------------------------
     70            if(Time_Sequence % on_every_50){
   \   000000   1C42....     MOV.W   &Time_Sequence, R12
   \   000004   3E403200     MOV.W   #0x32, R14
   \   000008   ........     CALLA   #?DivMod16u
   \   00000C   0E93         CMP.W   #0x0, R14
   \   00000E   0A24         JEQ     ??circle_right_0
     71              P6OUT &= ~R_FORWARD;              //Right wheel on 
   \   000010   D2C34302     BIC.B   #0x1, &0x243
     72              P6OUT |= L_FORWARD;              //Left wheel on
   \   000014   E2D34302     BIS.B   #0x2, &0x243
     73              GREEN_LED_ON;
   \   000018   F2D040004302 BIS.B   #0x40, &0x243
     74              RED_LED_ON;
   \   00001E   D2D30202     BIS.B   #0x1, &0x202
   \   000022   1001         RETA
     75              
     76            }else{
     77              P6OUT |= R_FORWARD;              //Right wheel on 
   \                     ??circle_right_0:
   \   000024   D2D34302     BIS.B   #0x1, &0x243
     78              P6OUT |= L_FORWARD;              //Left wheel on
   \   000028   E2D34302     BIS.B   #0x2, &0x243
     79              GREEN_LED_ON;
   \   00002C   F2D040004302 BIS.B   #0x40, &0x243
     80              RED_LED_ON;
   \   000032   D2D30202     BIS.B   #0x1, &0x202
     81            }
     82          
     83           //------------------------------------------------------------------------------
     84          }
   \   000036   1001         RETA
   \   000038                REQUIRE _A_PCOUT_L
   \   000038                REQUIRE _A_PAOUT_L
     85          

   \                                 In  segment CODE, align 2
     86          void straight_line(void){
   \                     straight_line:
     87          //------------------------------------------------------------------------------
     88          // Circle speed stopped
     89          //------------------------------------------------------------------------------
     90              P6OUT |= R_FORWARD;              //Right wheel on 
   \   000000   D2D34302     BIS.B   #0x1, &0x243
     91              P6OUT |= L_FORWARD;              //Left wheel on
   \   000004   E2D34302     BIS.B   #0x2, &0x243
     92          
     93          }
   \   000008   1001         RETA
   \   00000A                REQUIRE _A_PCOUT_L
     94          
     95          

   \                                 In  segment CODE, align 2
     96          void infinity (void){
   \                     infinity:
     97            //------------------------------------------------------------------------------
     98          // Figure 8
     99          //------------------------------------------------------------------------------
    100            if (circle_timer_count <= part1_inf){
   \   000000   B2900900.... CMP.W   #0x9, &circle_timer_count
   \   000006   022C         JC      ??infinity_0
    101              circle_left();
   \   000008   ........     BRA     #circle_left
    102            }else if( circle_timer_count <= part2_inf) {
   \                     ??infinity_0:
   \   00000C   B2901A00.... CMP.W   #0x1a, &circle_timer_count
   \   000012   022C         JC      ??infinity_1
    103              circle_right();
   \   000014   ........     BRA     #circle_right
    104            }else if( circle_timer_count <= part3_inf) {
   \                     ??infinity_1:
   \   000018   B2902D00.... CMP.W   #0x2d, &circle_timer_count
   \   00001E   022C         JC      ??infinity_2
    105              circle_left();
   \   000020   ........     BRA     #circle_left
    106            }else if( circle_timer_count <= part4_inf) {
   \                     ??infinity_2:
   \   000024   B2903E00.... CMP.W   #0x3e, &circle_timer_count
   \   00002A   022C         JC      ??infinity_3
    107              circle_right();
   \   00002C   ........     BRA     #circle_right
    108            }else if( circle_timer_count <= part5_inf) {
   \                     ??infinity_3:
   \   000030   B2904700.... CMP.W   #0x47, &circle_timer_count
   \   000036   022C         JC      ??infinity_4
    109              circle_left();
   \   000038   ........     BRA     #circle_left
    110            }else{
    111              stop_wheels();
   \                     ??infinity_4:
   \   00003C   ........     BRA     #stop_wheels
    112              }
    113          }
    114          

   \                                 In  segment CODE, align 2
    115          void triangle (void){
   \                     triangle:
    116          // //------------------------------------------------------------------------------
    117            // Triangle figure
    118            // //------------------------------------------------------------------------------
    119            if (circle_timer_count <= part1_tri){
   \   000000   A292....     CMP.W   #0x4, &circle_timer_count
   \   000004   022C         JC      ??triangle_0
    120              circle_left();
   \   000006   ........     BRA     #circle_left
    121            }else if( circle_timer_count <= part2_tri) {
   \                     ??triangle_0:
   \   00000A   B292....     CMP.W   #0x8, &circle_timer_count
   \   00000E   022C         JC      ??triangle_1
    122              straight_line();
   \   000010   ........     BRA     #straight_line
    123            }else if( circle_timer_count <= part3_tri) {
   \                     ??triangle_1:
   \   000014   B2900F00.... CMP.W   #0xf, &circle_timer_count
   \   00001A   022C         JC      ??triangle_2
    124              circle_left();
   \   00001C   ........     BRA     #circle_left
    125            }else if( circle_timer_count <= part4_tri) {
   \                     ??triangle_2:
   \   000020   B2901300.... CMP.W   #0x13, &circle_timer_count
   \   000026   022C         JC      ??triangle_3
    126              straight_line();
   \   000028   ........     BRA     #straight_line
    127            }else if( circle_timer_count <= part5_tri) {
   \                     ??triangle_3:
   \   00002C   B2901B00.... CMP.W   #0x1b, &circle_timer_count
   \   000032   022C         JC      ??triangle_4
    128              circle_left();
   \   000034   ........     BRA     #circle_left
    129            }else if( circle_timer_count <= part6_tri) {
   \                     ??triangle_4:
   \   000038   B2902000.... CMP.W   #0x20, &circle_timer_count
   \   00003E   022C         JC      ??triangle_5
    130              straight_line();
   \   000040   ........     BRA     #straight_line
    131            }else if( circle_timer_count <= part7_tri) {
   \                     ??triangle_5:
   \   000044   B2902700.... CMP.W   #0x27, &circle_timer_count
   \   00004A   022C         JC      ??triangle_6
    132              circle_left();
   \   00004C   ........     BRA     #circle_left
    133            }else if( circle_timer_count <= part8_tri) {
   \                     ??triangle_6:
   \   000050   B2902B00.... CMP.W   #0x2b, &circle_timer_count
   \   000056   022C         JC      ??triangle_7
    134              straight_line();
   \   000058   ........     BRA     #straight_line
    135            }else if( circle_timer_count <= part9_tri) {
   \                     ??triangle_7:
   \   00005C   B2903300.... CMP.W   #0x33, &circle_timer_count
   \   000062   022C         JC      ??triangle_8
    136              circle_left();
   \   000064   ........     BRA     #circle_left
    137            }else if( circle_timer_count <= part10_tri) {
   \                     ??triangle_8:
   \   000068   B2903700.... CMP.W   #0x37, &circle_timer_count
   \   00006E   022C         JC      ??triangle_9
    138              straight_line();
   \   000070   ........     BRA     #straight_line
    139            }else if( circle_timer_count <= part11_tri) {
   \                     ??triangle_9:
   \   000074   B2903E00.... CMP.W   #0x3e, &circle_timer_count
   \   00007A   022C         JC      ??triangle_10
    140              circle_left();
   \   00007C   ........     BRA     #circle_left
    141            }else if( circle_timer_count <= part12_tri) {
   \                     ??triangle_10:
   \   000080   B2904200.... CMP.W   #0x42, &circle_timer_count
   \   000086   022C         JC      ??triangle_11
    142              straight_line();   
   \   000088   ........     BRA     #straight_line
    143            }else{
    144              stop_wheels();
   \                     ??triangle_11:
   \   00008C   ........     BRA     #stop_wheels
    145              }
    146            
    147          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   circle
        4 ?DivMod16u
      4   circle_left
        4 ?DivMod16u
      4   circle_right
        4 ?DivMod16u
      4   infinity
        0   -> circle_left
        0   -> circle_right
        0   -> stop_wheels
      4   stop_wheels
      4   straight_line
      4   triangle
        0   -> circle_left
        0   -> stop_wheels
        0   -> straight_line


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  _A_PAOUT_L
       2  _A_PCOUT_L
      56  circle
      56  circle_left
      56  circle_right
       2  clockdiv_count
      64  infinity
      10  stop_wheels
      10  straight_line
     144  triangle

 
 396 bytes in segment CODE
   4 bytes in segment DATA16_AN
   2 bytes in segment DATA16_Z
 
 396 bytes of CODE memory
   2 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
