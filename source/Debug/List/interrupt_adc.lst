###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           04/Dec/2019  19:26:32
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Dr Velasquez\Desktop\306\306_code\Project 10\interrupt_adc.c
#    Command line  =  
#        -f C:\Users\DRVELA~1\AppData\Local\Temp\EW4E6B.tmp ("C:\Users\Dr
#        Velasquez\Desktop\306\306_code\Project 10\interrupt_adc.c" -lC
#        "C:\Users\Dr Velasquez\Desktop\306\306_code\Project 10\Debug\List" -o
#        "C:\Users\Dr Velasquez\Desktop\306\306_code\Project 10\Debug\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I ./\
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Dr Velasquez\Desktop\306\306_code\Project
#        10\Debug\List\interrupt_adc.lst
#    Object file   =  
#        C:\Users\Dr Velasquez\Desktop\306\306_code\Project
#        10\Debug\Obj\interrupt_adc.r43
#
###############################################################################

C:\Users\Dr Velasquez\Desktop\306\306_code\Project 10\interrupt_adc.c
      1          //===========================================================================
      2          // File Name : interrupt_adc.c
      3          //
      4          // Description: This file contains the Initialization for all port pins
      5          //
      6          // Author: Yuvini Velasquez
      7          // Date: 9/11/19
      8          // Compiler: Built with IAR Embedded Workbench Version: V (7.12.4)
      9          //===========================================================================
     10          
     11          #include  "functions.h"
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADCCTL0_L
   \                     _A_ADCCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x70a
   \   union <unnamed> _A_ADCMCTL0_L
   \                     _A_ADCMCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x712
   \   union <unnamed> _A_ADCMEM0_L
   \                     _A_ADCMEM0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x71e
   \   union <unnamed> _A_ADCIV_L
   \                     _A_ADCIV_L:
   \   000000                DS8 2
     13          #include <string.h>
     14          #include "macros.h"
     15          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          unsigned int ADC_Channel;
   \                     ADC_Channel:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          unsigned int ADC_Left_Detect;
   \                     ADC_Left_Detect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          unsigned int ADC_Right_Detect;
   \                     ADC_Right_Detect:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          unsigned int ADC_Thumb;
   \                     ADC_Thumb:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          unsigned int adc_line;
   \                     adc_line:
   \   000000                DS8 2
     21          
     22          #pragma vector=ADC_VECTOR

   \                                 In  segment ISR_CODE, align 2
     23          __interrupt void ADC_ISR(void){
   \                     ADC_ISR:
   \   000000   3F15         PUSHM.W #0x4, R15
     24          switch(__even_in_range(ADCIV,ADCIV_ADCIFG)){
   \   000002   1F421E07     MOV.W   &0x71e, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for ADC_ISR>_0`:
   \   000008   5C3C         JMP     ??ADC_ISR_0
   \   00000A   5B3C         JMP     ??ADC_ISR_0
   \   00000C   5A3C         JMP     ??ADC_ISR_0
   \   00000E   593C         JMP     ??ADC_ISR_0
   \   000010   583C         JMP     ??ADC_ISR_0
   \   000012   573C         JMP     ??ADC_ISR_0
   \   000014   003C         JMP     ??ADC_ISR_5
     25            case ADCIV_NONE:
     26              break;
     27            case ADCIV_ADCOVIFG: // When a conversion result is written to the ADCMEM0
     28            // before its previous conversion result was read.
     29              break;
     30            case ADCIV_ADCTOVIFG: // ADC conversion-time overflow
     31              break;
     32            case ADCIV_ADCHIIFG: // Window comparator interrupt flags
     33              break;
     34            case ADCIV_ADCLOIFG: // Window comparator interrupt flag
     35              break;
     36            case ADCIV_ADCINIFG: // Window comparator interrupt flag
     37              break;
     38            case ADCIV_ADCIFG: // ADCMEM0 memory register with the conversion result
     39              ADCCTL0 &= ~ADCENC;         //Disables ENC bit.
   \                     ??ADC_ISR_5:
   \   000016   A2C30007     BIC.W   #0x2, &0x700
     40              switch (ADC_Channel++){
   \   00001A   1F42....     MOV.W   &ADC_Channel, R15
   \   00001E   0E4F         MOV.W   R15, R14
   \   000020   1E53         ADD.W   #0x1, R14
   \   000022   824E....     MOV.W   R14, &ADC_Channel
   \   000026   0F83         SUB.W   #0x0, R15
   \   000028   0524         JEQ     ??ADC_ISR_2
   \   00002A   1F83         SUB.W   #0x1, R15
   \   00002C   1B24         JEQ     ??ADC_ISR_3
   \   00002E   1F83         SUB.W   #0x1, R15
   \   000030   3124         JEQ     ??ADC_ISR_4
   \   000032   473C         JMP     ??ADC_ISR_0
     41                case THUMB_CASE: // Channel A2 Interrupt
     42                  ADCMCTL0 &= ~ADCINCH_5; // Disable Last channel A2
   \                     ??ADC_ISR_2:
   \   000034   B2F0FAFF0A07 AND.W   #0xfffa, &0x70a
     43                  ADCMCTL0 |= ADCINCH_2; // Enable Next channel A3
   \   00003A   A2D30A07     BIS.W   #0x2, &0x70a
     44                  ADC_Thumb = ADCMEM0; // Move result into Global
   \   00003E   92421207.... MOV.W   &0x712, &ADC_Thumb
     45                  ADC_Thumb = ADC_Thumb >> DIVIDE_4; // Divide the result by 4
   \   000044   1F42....     MOV.W   &ADC_Thumb, R15
   \   000048   5F07         RRUM.W  #0x2, R15
   \   00004A   824F....     MOV.W   R15, &ADC_Thumb
     46                  adc_line=ADC_LINE1;             //Line where it will be displayed on the menu
   \   00004E   9243....     MOV.W   #0x1, &adc_line
     47                  HEXtoBCD(ADC_Thumb); // Convert result to String
   \   000052   1C42....     MOV.W   &ADC_Thumb, R12
   \   000056   ........     CALLA   #HEXtoBCD
     48                  ADCCTL0 |= ADCENC; // Enable Conversions
   \   00005A   A2D30007     BIS.W   #0x2, &0x700
     49                 ADCCTL0 |= ADCSC; // Start next sample
   \   00005E   92D30007     BIS.W   #0x1, &0x700
     50                  break;
   \   000062   2F3C         JMP     ??ADC_ISR_0
     51                case LEFT_DETECT_CASE: // Channel A3 Interrupt   Left_Detect
     52                  ADCMCTL0 &= ~ADCINCH_2; // Disable Last channel A3
   \                     ??ADC_ISR_3:
   \   000064   A2C30A07     BIC.W   #0x2, &0x70a
     53                  ADCMCTL0 |= ADCINCH_3; // Enable Next channel A5
   \   000068   B2D003000A07 BIS.W   #0x3, &0x70a
     54                  ADC_Left_Detect = ADCMEM0; // Move result into Global
   \   00006E   92421207.... MOV.W   &0x712, &ADC_Left_Detect
     55                  ADC_Left_Detect = ADC_Left_Detect >> DIVIDE_4; // Divide the result by 4
   \   000074   1F42....     MOV.W   &ADC_Left_Detect, R15
   \   000078   5F07         RRUM.W  #0x2, R15
   \   00007A   824F....     MOV.W   R15, &ADC_Left_Detect
     56                  adc_line=ADC_LINE2;             //Line where it will be displayed on the menu    
   \   00007E   A243....     MOV.W   #0x2, &adc_line
     57                  HEXtoBCD(ADC_Left_Detect); // Convert result to String
   \   000082   1C42....     MOV.W   &ADC_Left_Detect, R12
   \   000086   ........     CALLA   #HEXtoBCD
     58                 ADCCTL0 |= ADCENC; // Enable Conversions
   \   00008A   A2D30007     BIS.W   #0x2, &0x700
     59                 ADCCTL0 |= ADCSC; // Start next sample
   \   00008E   92D30007     BIS.W   #0x1, &0x700
     60                  break;
   \   000092   173C         JMP     ??ADC_ISR_0
     61                case RIGHT_DETECT_CASE: // Channel A2 Interrupt
     62                  ADCMCTL0 &= ~ADCINCH_3; // Disable Last channel A5
   \                     ??ADC_ISR_4:
   \   000094   B2F0FCFF0A07 AND.W   #0xfffc, &0x70a
     63                  ADCMCTL0 |= ADCINCH_5; // Enable Next channel A2
   \   00009A   B2D005000A07 BIS.W   #0x5, &0x70a
     64                  ADC_Right_Detect = ADCMEM0; // Move result into Global
   \   0000A0   92421207.... MOV.W   &0x712, &ADC_Right_Detect
     65                  ADC_Right_Detect = ADC_Right_Detect >> DIVIDE_4; // Divide the result by 4
   \   0000A6   1F42....     MOV.W   &ADC_Right_Detect, R15
   \   0000AA   5F07         RRUM.W  #0x2, R15
   \   0000AC   824F....     MOV.W   R15, &ADC_Right_Detect
     66                  adc_line=ADC_LINE3;             //Line where it will be displayed on the menu        
   \   0000B0   B2400300.... MOV.W   #0x3, &adc_line
     67                  HEXtoBCD(ADC_Right_Detect); // Convert result to String
   \   0000B6   1C42....     MOV.W   &ADC_Right_Detect, R12
   \   0000BA   ........     CALLA   #HEXtoBCD
     68                  ADC_Channel=RESET_STATE;
   \   0000BE   8243....     MOV.W   #0x0, &ADC_Channel
     69                  break;
     70                default:
     71                  break;
     72              }
     73              //ADCCTL0 |= ADCENC; // Enable Conversions
     74              //ADCCTL0 |= ADCSC; // Start next sample
     75          
     76          
     77            break;
     78          default:
     79            break;
     80          }
     81          }
   \                     ??ADC_ISR_0:
   \   0000C2   3C17         POPM.W  #0x4, R15
   \   0000C4   0013         RETI
   \   0000C6                REQUIRE _A_ADCCTL0_L
   \   0000C6                REQUIRE _A_ADCMCTL0_L
   \   0000C6                REQUIRE _A_ADCMEM0_L
   \   0000C6                REQUIRE _A_ADCIV_L

   \                                 In  segment INTVEC, offset 0x3a, root
   \                     `??ADC_ISR::??INTVEC 58`:
   \   00003A   ....         DC16    ADC_ISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   ADC_ISR
       12   -> HEXtoBCD


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ADC_Channel
     198  ADC_ISR
       2  ADC_ISR::??INTVEC 58
       2  ADC_Left_Detect
       2  ADC_Right_Detect
       2  ADC_Thumb
       2  _A_ADCCTL0_L
       2  _A_ADCIV_L
       2  _A_ADCMCTL0_L
       2  _A_ADCMEM0_L
       2  adc_line

 
   8 bytes in segment DATA16_AN
  10 bytes in segment DATA16_Z
   2 bytes in segment INTVEC
 198 bytes in segment ISR_CODE
 
 198 bytes of CODE  memory
   0 bytes of CONST memory (+ 2 bytes shared)
  10 bytes of DATA  memory (+ 8 bytes shared)

Errors: none
Warnings: none
