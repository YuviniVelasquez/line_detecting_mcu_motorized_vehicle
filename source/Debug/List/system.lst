###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           04/Dec/2019  19:21:28
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Dr Velasquez\Desktop\306\306_code\Project 10\system.c
#    Command line  =  
#        -f C:\Users\DRVELA~1\AppData\Local\Temp\EWAAA9.tmp ("C:\Users\Dr
#        Velasquez\Desktop\306\306_code\Project 10\system.c" -lC "C:\Users\Dr
#        Velasquez\Desktop\306\306_code\Project 10\Debug\List" -o "C:\Users\Dr
#        Velasquez\Desktop\306\306_code\Project 10\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I ./\
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Dr Velasquez\Desktop\306\306_code\Project
#        10\Debug\List\system.lst
#    Object file   =  
#        C:\Users\Dr Velasquez\Desktop\306\306_code\Project
#        10\Debug\Obj\system.r43
#
###############################################################################

C:\Users\Dr Velasquez\Desktop\306\306_code\Project 10\system.c
      1          //------------------------------------------------------------------------------
      2          // File Name : system.c
      3          //  Description: This file contains the System Configurations
      4          //
      5          //  Jim Carlson
      6          //  Jan 2016
      7          //  Built with IAR Embedded Workbench Version: V(7.12.4)
      8          //------------------------------------------------------------------------------
      9          
     10          //------------------------------------------------------------------------------
     11          #include  "functions.h"
     12          #include  "msp430.h"
     13          #include <string.h>
     14          #include "macros.h"
     15          
     16          void enable_interrupts(void);
     17          
     18          //------------------------------------------------------------------------------
     19          // System Configurations
     20          
     21          // Tells the compiler to provide the value in reg as an input to an
     22          // inline assembly block.  Even though the block contains no instructions,
     23          // the compiler may not optimize it away, and is told that the value
     24          // may change and should not be relied upon.
     25          
     26          //inline void READ_AND_DISCARD(unsigned int reg) __attribute__((always_inline));
     27          //void READ_AND_DISCARD(unsigned int reg){
     28          //  asm volatile ("" : "=m" (reg) : "r" (reg));
     29          //}
     30          
     31          //inline void enable_interrupts(void) __attribute__((always_inline));

   \                                 In  segment CODE, align 2
     32          void enable_interrupts(void){
   \                     enable_interrupts:
     33            __bis_SR_register(GIE);     // enable interrupts
   \   000000   0343         NOP
   \   000002   32D2         BIS.W   #0x8, SR
     34          //  asm volatile ("eint \n");
     35          }
   \   000004   1001         RETA
     36          
     37          //inline void disable_interrupts(void) __attribute__((always_inline));
     38          //void disable_interrupts(void){
     39          //  asm volatile ("dint \n");
     40          //}
     41          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   enable_interrupts


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  enable_interrupts

 
 6 bytes in segment CODE
 
 6 bytes of CODE memory

Errors: none
Warnings: none
